meta
{
	title: "Jungle Bus – validation ruleset";
	version: "0.5";
	description: tr("Uncompromising validation of transit data");
	author: "nlehuby";
	link: "http://junglebus.io/";
	baselanguage: "en";
	watch-modified: true;
}

/* Tags unitaires sur les relations */
relation[type=route][!route]
{
	throwError: tr("Missing transportation mode, add a tag route = bus/coach/tram/etc");
}

relation[type=route_master][!route_master][!route]
{
	throwError: tr("Missing transportation mode, add a tag route = bus/coach/tram/etc");
}

/* mode dans le mauvais tag */
relation[type=route_master][!route_master][route]
{
	throwError: tr("Missing transportation mode, change tag route to route_master");
	fixChangeKey: "route=>route_master";
}

relation[type=route][route=~/^(bus|coach|train|subway|monorail|trolleybus|aerialway|funicular|ferry|tram|share_taxi|light_rail|school_bus)$/]
{
	set pt_route;
}

relation[type=route_master][route_master=~/^(bus|coach|train|subway|monorail|trolleybus|aerialway|funicular|ferry|tram|share_taxi|light_rail|school_bus)$/]
{
	set pt_route_master;
}

relation.pt_route[!public_transport:version]
{
	throwError: tr("Missing public_transport:version tag on a public_transport route relation");
	assertNoMatch: "relation type=route route=bus public_transport:version=1";
	assertMatch: "relation type=route route=bus";
}

relation.pt_route[!network],
relation.pt_route_master[!network]
{
	throwError: tr("Missing network tag on a public_transport relation");
	assertNoMatch: "relation type=route route=bus network=BiBiBus";
	assertMatch: "relation type=route route=bus";
}

relation.pt_route[!operator],
relation.pt_route_master[!operator]
{
	throwError: tr("Missing operator tag on a public_transport relation");
	assertNoMatch: "relation type=route route=bus operator=BiBiBus";
	assertMatch: "relation type=route route=bus";
}

relation.pt_route[!ref],
relation.pt_route_master[!ref]
{
	throwError: tr("Missing ref tag on a public_transport relation");
	assertNoMatch: "relation type=route route=bus ref=3";
	assertMatch: "relation type=route route=bus";
}

relation.pt_route[!from],
relation.pt_route[!to]
{
	throwError: tr("Missing from/to tag on a public_transport route relation");
	assertNoMatch: "relation type=route route=bus from=A to=B";
	assertMatch: "relation type=route route=bus from=A";
	assertMatch: "relation type=route route=bus to=B";
	assertMatch: "relation type=route route=bus";
}

relation.pt_route["fixme:relation"="order members"]
{
	throwWarning: tr("The stops may not be in the right order");
}

/* valeurs d'opérateur interdites */
relation.pt_route["operator"=~/STIF|Kéolis|Véolia/][inside("FR")],
relation.pt_route_master["operator"=~/STIF|Kéolis|Véolia/][inside("FR")]
{
	throwError: tr("Check the operator tag");
}

/* valeurs de réseau interdites */
relation.pt_route["network"=~/STIF|Kéolis|Véolia/][inside("FR")],
relation.pt_route_master["network"=~/STIF|Kéolis|Véolia/][inside("FR")]
{
	throwError: tr("Check the network tag");
}

/* Tags unitaires sur les arrêts */
node[highway=bus_stop][!name]
{
	throwWarning: tr("Stop without name");
}

node[highway=bus_stop][amenity=bus_station]
{
	throwError: tr("Is it a bus stop or a bus station?");
	fixRemove: "amenity";
}

node[highway=bus_stop][!public_transport]
{
	throwError: tr("Specify if it is a stop (platform) or a location on the road (stop_position)");
	group: tr("Missing public_transport tag on a public transport stop");
	fixAdd: "public_transport=platform";
	assertNoMatch: "node highway=bus_stop public_transport=platform";
	assertNoMatch: "node highway=bus_stop public_transport=stop_position";
	assertMatch: "node highway=bus_stop";
}

node[railway=tram_stop][!public_transport]
{
	throwError: tr("Specify if it is a stop (platform) or a location on the rails (stop_position)");
	group: tr("Missing public_transport tag on a public transport stop");
	fixAdd: "public_transport=stop_position";
	assertNoMatch: "node railway=tram_stop public_transport=platform";
	assertNoMatch: "node railway=tram_stop public_transport=stop_position";
	assertMatch: "node railway=tram_stop";
}

node[public_transport=platform][!highway][!railway][!bus][!shelter]
{
	throwError: tr("The legacy tag is missing, add the tag highway=bus_stop / railway=tram_stop");
	group: tr("Missing legacy tag on a public transport stop");
}

node[public_transport=platform][!highway][!railway][bus=yes],
node[public_transport=platform][!highway][!railway][shelter]
{
	throwError: tr("Is this a bus stop? add the tag highway=bus_stop");
	group: tr("Missing legacy tag on a public transport stop");
	fixAdd: "highway=bus_stop";
	assertMatch: "node public_transport=platform shelter=yes"
}

/* Le tag note est souvent utilisé pour marquer les lignes qui passent à l'arrêt,
ou ajouter des infos qui pourraient être portées par un autre tag*/
node[highway=bus_stop][note],
node[highway=bus_stop][note:fr][inside("FR")]
{
	throwWarning: tr("Check if the note can be deleted");
}

node[highway=bus_stop][network][inside("FR")]
{
	throwWarning: tr("The network should be on the transport lines and not on the stops");
	fixRemove: "network";
}

node[highway=bus_stop][operator][inside("FR")]
{
	throwWarning: tr("The operator should be on the transport lines and not on the stops");
	fixRemove: "operator";
}

/* Toutes les variantes de lignes (relations route) devraient être dans une ligne (relation route_master) */
relation[type=route_master] > relation[type=route]
{
	set route_ok
}

relation.pt_route!.route_ok
{
	throwError: tr("The line variant does not belong to any line, add it to the route_master relation");
}

/* Tous les arrêts devraient être dans au moins une variante de lignes */
relation[type=route] > node[public_transport=platform]
{
	set platform_ok
}

node[public_transport=platform]!.platform_ok
{
	throwError: tr("The stop is not served by any line, add it to a route relation");
}
